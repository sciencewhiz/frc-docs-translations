# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2024\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-11-03 16:04+0000\n"
"PO-Revision-Date: 2022-01-10 04:14+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022\n"
"Language-Team: French (Canada) (https://app.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:2
msgid "Writing Your Own Sendable Classes"
msgstr "Conception de vos propres classes Sendable"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:6
msgid ""
"For example, here is the implementation of ``initSendable`` from WPILib's "
"``BangBangController``:"
msgstr ""
"Voici, par exemple, voici l’implémentation de ``initSendable`` de "
"l'interface à ``BangBangController`` de la WPILib:"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:22
msgid ""
"To enable the automatic updating of values by WPILib \"in the background\", "
"``Sendable`` data names are bound to getter and setter functions rather than"
" specific data values.  If a field that you wish to log has no defined "
"setters and getters, they can be defined inline with a lambda expression."
msgstr ""
"Pour permettre la mise à jour automatique des valeurs par la WPILib  \"en "
"arrière-plan\", les noms de données ``Sendable`` sont liés à des méthodes "
"getter et setter plutôt qu’à des valeurs de données spécifiques. Si un champ"
" que vous souhaitez consigner n’a pas de setters et de getters définis, ils "
"peuvent être définis inline à l'aide d'une expression lambda."

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:25
msgid "The SendableBuilder Class"
msgstr "La classe SendableBuilder "

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:30
msgid "Databinding with addProperty Methods"
msgstr "Liaison des données à l'aide des méthodes addProperty"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:32
msgid ""
"Like all WPILib dashboard code, ``Sendable`` fields are ultimately "
"transmitted over :ref:`NetworkTables "
"<docs/software/networktables/networktables-intro:What is NetworkTables>`, "
"and thus the databinding methods provided by ``SendableBuilder`` match the "
"supported NetworkTables data types:"
msgstr ""
"Comme dans tout code d'un dashboard de la WPILib, les champs ``Sendable`` "
"sont en fin de compte transmis via les :ref:`NetworkTables "
"<docs/software/networktables/networktables-intro:What is NetworkTables>`, et"
" donc les méthodes de liaison de données fournies par ``SendableBuilder`` "
"correspondent aux types de données NetworkTables pris en charge:"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:34
msgid "``boolean``: ``addBooleanProperty``"
msgstr "``boolean``: ``addBooleanProperty``"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:35
msgid "``boolean[]``: ``addBooleanArrayProperty``"
msgstr "``boolean[]``: ``addBooleanArrayProperty``"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:36
msgid "``double``: ``addDoubleProperty``"
msgstr "``double``: ``addDoubleProperty``"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:37
msgid "``double[]``: ``addDoubleArrayProperty``"
msgstr "``double[]``: ``addDoubleArrayProperty``"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:38
msgid "``string``:  ``addStringProperty``"
msgstr "``string``:  ``addStringProperty``"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:39
msgid "``string[]``: ``addStringArrayProperty``"
msgstr "``string[]``: ``addStringArrayProperty``"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:40
msgid "``byte[]``: ``addRawProperty``"
msgstr "``byte[]``: ``addRawProperty``"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:43
msgid "Ensuring Safety with setSafeState and setActuator"
msgstr "Assurer la sécurité avec setSafeState et setActuator"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:45
msgid ""
"Since ``Sendable`` allows users to consume arbitrary values from the "
"dashboard, it is possible for users to pipe dashboard controls directly to "
"robot actuations.  This is extremely unsafe if not done with care; "
"dashboards are not a particularly good interface for controlling robot "
"movement, and users generally do not expect the robot to move in response to"
" a change on the dashboard."
msgstr ""
"Étant donné que ``Sendable`` permet aux utilisateurs de consommer des "
"valeurs arbitraires lues du dashboard, il est possible pour les utilisateurs"
" de diriger les commandes du dashboard directement vers les actionneurs du "
"robot. Cette opération est extrêmement dangereuse si elle n’est pas faite "
"avec soin; Les dashboards ne sont pas une interface particulièrement "
"efficace pour contrôler les mouvements du robot, et les utilisateurs ne "
"s’attendent généralement pas à ce que le robot se déplace en réponse à un "
"changement effectué à partir de valeur sur le dashboard."

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:47
msgid ""
"To help users ensure safety when interfacing with dashboard values, "
"``SendableBuilder`` exposes a ``setSafeState`` method, which is called to "
"place any ``Sendable`` mechanism that actuates based on dashboard input into"
" a safe state.  Any potentially hazardous user-written ``Sendable`` "
"implementation should call ``setSafeState`` with a suitable safe state "
"implementation.  For example, here is the implementation from the WPILib "
"``PWMMotorController`` class:"
msgstr ""
"Pour aider les utilisateurs à s'assurer  d'une interfaçage sécuritaire avec "
"les valeurs du dashboard, ``SendableBuilder`` expose une méthode "
"``setSafeState``, qui est appelée pour placer tout mécanisme ``Sendable`` "
"qui s’active en fonction d'une entrée du dashboard dans un état sécuritaire."
" Toute implémentation ``Sendable`` potentiellement dangereuse programmée par"
" un utilisateur doit appeler ``setSafeState`` avec une implémentation d’état"
" sécuritaire appropriée. Voici, par exemple, l’implémentation de la classe "
"WPILib ``PWMMotorController``:"

#: ../../frc-docs/source/docs/software/telemetry/writing-sendable-classes.rst:63
msgid ""
"Additionally, users may call ``builder.setActuator(true)`` to mark any "
"mechanism that might move as a result of ``Sendable`` input as an actuator."
"  Currently, this is used by :ref:`Shuffleboard "
"<docs/software/dashboards/shuffleboard/getting-started/shuffleboard-"
"tour:Tour of Shuffleboard>` to disable actuator widgets when not in "
":ref:`LiveWindow <docs/controls-overviews/control-system-"
"software:LiveWindow>` mode."
msgstr ""
"En outre, les utilisateurs peuvent appeler ``builder.setActuator(true)`` "
"pour marquer tout mécanisme qui pourrait se déplacer à la suite de l’entrée "
"``Sendable`` en tant qu’actionneur. Actuellement, il est utilisé par "
":ref:`Shuffleboard <docs/software/dashboards/shuffleboard/getting-"
"started/shuffleboard-tour:Tour of Shuffleboard>` pour désactiver les widgets"
" d’actionneur lorsqu’ils ne sont pas en mode :ref:`LiveWindow "
"<docs/controls-overviews/control-system-software:LiveWindow>`"

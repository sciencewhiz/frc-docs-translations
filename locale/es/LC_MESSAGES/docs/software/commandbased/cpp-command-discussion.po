# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Gibrán Verástegui <Gibranbasket1526@gmail.com>, 2020
# heriberto gutierrez <herigtzt04@yahoo.com>, 2020
# Paulina Maynez <paump22@hotmail.com>, 2020
# Diana Ramos <dianaracasas@gmail.com>, 2020
# Sofia Fernandez <sofiafdz.val@gmail.com>, 2023
# Dylan Gallegos, 2023
# Hugo Espino <hugo-daniel7@hotmail.com>, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2024\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-13 04:04+0000\n"
"PO-Revision-Date: 2020-09-04 16:14+0000\n"
"Last-Translator: Hugo Espino <hugo-daniel7@hotmail.com>, 2023\n"
"Language-Team: Spanish (Mexico) (https://app.transifex.com/wpilib/teams/109324/es_MX/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_MX\n"
"Plural-Forms: nplurals=3; plural=n == 1 ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:2
msgid "A Technical Discussion on C++ Commands"
msgstr "Una discusión técnica sobre los comandos de C ++"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:10
msgid "Ownership Model"
msgstr "Modelo de propiedad"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:11
msgid ""
"The old command-based framework employed the use of raw pointers, meaning "
"that users had to use ``new`` (resulting in manual heap allocations) in "
"their robot code. Since there was no clear indication on who owned the "
"commands (the scheduler, the command groups, or the user themselves), it was"
" not apparent who was supposed to take care of freeing the memory."
msgstr ""
"El antiguo marco basado en comandos empleaba el uso de punteros sin "
"procesar, lo que significa que los usuarios tenían que usar ``nuevo`` (lo "
"que resultaba en asignaciones de montón manuales) en su código de robot. "
"Dado que no había una indicación clara sobre quién era el propietario de los"
" comandos (el programador, los grupos de comandos o el usuario mismo), no "
"era evidente quién se suponía que debía encargarse de liberar la memoria."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:13
msgid ""
"Several examples in the old command-based framework involved code like this:"
msgstr ""
"Varios ejemplos en el antiguo marco basado en comandos involucraban código "
"como este:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:29
msgid ""
"This glaring problem was one of the reasons for the rewrite of the "
"framework. A comprehensive ownership model was introduced with this rewrite,"
" along with the usage of smart pointers which will automatically free memory"
" when they go out of scope."
msgstr ""
"Este problema evidente fue una de las razones de la reescritura del marco. "
"Se introdujo un modelo de propiedad integral con esta reescritura, junto con"
" el uso de punteros inteligentes que liberarán memoria automáticamente "
"cuando se salgan del alcance."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:34
msgid "``std::unique_ptr`` vs. ``std::shared_ptr``"
msgstr "``std::unique_ptr`` vs. ``std::shared_ptr``"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:35
msgid ""
"Using ``std::unique_ptr`` allows us to clearly determine who owns the "
"object. Because an ``std::unique_ptr`` cannot be copied, there will never be"
" more than one instance of a ``std::unique_ptr`` that points to the same "
"block of memory on the heap. For example, a constructor for "
"``SequentialCommandGroup`` takes in a "
"``std::vector<std::unique_ptr<Command>>&&``. This means that it requires an "
"rvalue reference to a vector of ``std::unique_ptr<Command>``. Let's go "
"through some example code step-by-step to understand this better:"
msgstr ""
"El uso de ``std::unique_ptr`` nos permite determinar claramente quién es el "
"propietario del objeto. Debido a que un ``std::unique_ptr`` no se puede "
"copiar, nunca habrá más de una instancia de un `` td::unique_ptr`` que "
"apunte al mismo bloque de memoria en el montón. Por ejemplo, un constructor "
"para ``SequentialCommandGroup`` toma un "
"``std::vector<std::unique_ptr<Command>> &&``. Esto significa que requiere "
"una referencia rvalue a un vector de ``std::unique_ptr <Command>``. "
"Repasemos un código de ejemplo paso a paso para comprender esto mejor:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:61
msgid ""
"With ``std::shared_ptr``, there is no clear ownership model because there "
"can be multiple instances of a ``std::shared_ptr`` that point to the same "
"block of memory. If commands were in ``std::shared_ptr`` instances, a "
"command group or the command scheduler cannot take ownership and free the "
"memory once the command has finished executing because the user might still "
"unknowingly still have a ``std::shared_ptr`` instance pointing to that block"
" of memory somewhere in scope."
msgstr ""
"Con ``std::shared_ptr``, no hay un modelo de propiedad claro porque puede "
"haber varias instancias de un ``std::shared_ptr`` que apuntan al mismo "
"bloque de memoria. Si los comandos estuvieran en instancias "
"``std::shared_ptr``, un grupo de comandos o el programador de comandos no "
"puede tomar posesión y liberar la memoria una vez que el comando ha "
"terminado de ejecutarse porque el usuario, sin saberlo, todavía podría tener"
" un ``std::shared_ptr`` instancia que apunta a ese bloque de memoria en "
"algún lugar del alcance."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:64
msgid "Use of CRTP"
msgstr "Uso de CRTP"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:68
msgid "Command Decorators"
msgstr "Decoradores de comando"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:69
msgid ""
"The new command-based framework includes a feature known as \"command "
"decorators\", which allows the user to something like this:"
msgstr ""
"El nuevo marco basado en comandos incluye una función conocida como "
"\"decoradores de comandos\", que permite al usuario hacer algo como esto:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:76
msgid ""
"When ``task`` is scheduled, it will first execute ``MyCommand()`` and once "
"that command has finished executing, it will print the message to the "
"console. The way this is achieved internally is by using a sequential "
"command group."
msgstr ""
"Cuando se programa la ``tarea`` , primero ejecutará ``MyCommand()`` y una "
"vez que ese comando haya terminado de ejecutarse, imprimirá el mensaje en la"
" consola. La forma en que esto se logra internamente es mediante el uso de "
"un grupo de comando secuencial."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:78
msgid ""
"Recall from the previous section that in order to construct a sequential "
"command group, we need a vector of unique pointers to each command. Creating"
" the unique pointer for the print function is pretty trivial:"
msgstr ""
"Recuerde de la sección anterior que para construir un grupo de comando "
"secuencial, necesitamos un vector de punteros únicos para cada comando. "
"Crear el puntero único para la función de impresión es bastante trivial:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:85
msgid ""
"Here ``temp`` is storing the vector of commands that we need to pass into "
"the ``SequentialCommandGroup`` constructor. But before we add that "
"``InstantCommand``, we need to add ``MyCommand()`` to the "
"``SequentialCommandGroup``. How do we do that?"
msgstr ""
"Aquí, ``temp`` almacena el vector de comandos que necesitamos pasar al "
"constructor ``SequentialCommandGroup`` . Pero antes de agregar ese "
"``InstantCommand``,necesitamos agregar ``MyCommand()`` "
"al``SequentialCommandGroup`` . ¿Como hacemos eso?"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:94
msgid "Solutions to the Problem"
msgstr "Soluciones al problema"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:96
msgid ""
"Our initial solution to this was to create a virtual method in ``Command`` "
"called ``TransferOwnership()`` that every subclass of ``Command`` had to "
"override. Such an override would have looked like this:"
msgstr ""
"Nuestra solución inicial a esto fue crear un método virtual en ``Command`` "
"llamado ``TransferOwnership()`` que cada subclase de ``Command`` tenía que "
"anular. Tal anulación se habría visto así:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:104
msgid ""
"Because the code would be in the derived subclass, ``*this`` would actually "
"point to the desired subclass instance and the user has the type info of the"
" derived class to make the unique pointer."
msgstr ""
"Debido a que el código estaría en la subclase derivada, ``*this`` realmente "
"apuntaría a la instancia de subclase deseada y el usuario tiene la "
"información de tipo de la clase derivada para hacer el puntero único."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:106
msgid ""
"After a few days of deliberation, a CRTP method was proposed. Here, an "
"intermediary derived class of ``Command`` called ``CommandHelper`` would "
"exist. ``CommandHelper`` would have two template arguments, the original "
"base class and the desired derived subclass. Let's take a look at a basic "
"implementation of ``CommandHelper`` to understand this:"
msgstr ""
"Después de unos días de deliberación, se propuso un método CRTP. Aquí, una "
"clase derivada intermedia de ``Command`` llamada ``CommandHelper``  "
"esxistiría. ``CommandHelper`` tendría dos argumentos de plantilla, la clase "
"base original y la subclase derivada deseada. Echemos un vistazo a una "
"implementación básica de ``CommandHelper`` para entender esto:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:126
msgid ""
"Thus, making your custom commands extend ``CommandHelper`` instead of "
"``Command`` will automatically implement this boilerplate for you and this "
"is the reasoning behind asking teams to use what may seem to be a rather "
"obscure way of doing things."
msgstr ""
"Así, haciendo que tus comandos personalizados extiendan ``CommandHelper`` en"
" lugar de ``Command`` implementará automáticamente esta plantilla para ti y "
"este es el razonamiento detrás de pedir a los equipos que usen lo que puede "
"parecer una forma bastante oscura de hacer las cosas."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:128
msgid "Going back to our ``AndThen()`` example, we can now do the following:"
msgstr ""
"Volviendo a nuestro ``AndThen()`` ejemplo, ahora podemos hacer lo siguiente:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:138
msgid "Lack of Advanced Decorators"
msgstr "Falta de decoradores avanzados"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:139
msgid ""
"Most of the C++ decorators take in ``std::function<void()>`` instead of "
"actual commands themselves. The idea of taking in actual commands in "
"decorators such as ``AndThen()``, ``BeforeStarting()``, etc. was considered "
"but then abandoned due to a variety of reasons."
msgstr ""
"La mayoría de los decoradores de C++ toman ``std::function<void()>`` en "
"lugar de comandos reales ellos mismos. La idea de tomar comandos reales en "
"decoradores como ``AndThen()``, ``BeforeStarting()``, etc. fue considerada "
"pero luego abandonada debido a una variedad de razones."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:142
msgid "Templating Decorators"
msgstr "Decoradores de plantillas"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:143
msgid ""
"Because we need to know the types of the commands that we are adding to a "
"command group at compile-time, we will need to use templates (variadic for "
"multiple commands). However, this might not seem like a big deal. The "
"constructors for command groups do this anyway:"
msgstr ""
"Debido a que necesitamos saber los tipos de los comandos que estamos "
"añadiendo a un grupo de comandos en tiempo de compilación, necesitaremos "
"usar plantillas (variadic para múltiples comandos). Sin embargo, esto podría"
" no parecer un gran problema. Los constructores de grupos de comandos lo "
"hacen de todas formas:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:165
msgid ""
"This is a secondary constructor for ``SequentialCommandGroup`` in addition "
"to the vector constructor that we described above."
msgstr ""
"Este es un constructor secundario para el ``SequentialCommandGroup``, además"
" del constructor de vectores que describimos anteriormente."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:167
msgid ""
"However, when we make a templated function, its definition must be declared "
"inline. This means that we will need to instantiate the "
"``SequentialCommandGroup`` in the ``Command.h`` header, which poses a "
"problem. ``SequentialCommandGroup.h`` includes ``Command.h``. If we include "
"``SequentialCommandGroup.h`` inside of ``Command.h``, we have a circular "
"dependency. How do we do it now then?"
msgstr ""
"Sin embargo, cuando realizamos una función de plantilla, su definición debe "
"ser declarada en línea. Esto significa que tendremos que instanciar el "
"``SequentialCommandGroup`` en el encabezado \"Command.h\", lo que plantea un"
" problema. ``SequentialCommandGroup`` incluye \"Command.h\". Si incluimos "
"``SequentialCommandGroup`` dentro de \"Command.h\", tenemos una dependencia "
"circular. ¿Cómo lo hacemos ahora entonces?"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:169
msgid "We use a forward declaration at the top of ``Command.h``:"
msgstr ""
"Usamos una declaración hacia adelante en la parte superior de ``Command.h``:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:177
msgid ""
"And then we include ``SequentialCommandGroup.h`` in ``Command.cpp``. If "
"these decorator functions were templated however, we cannot write "
"definitions in the ``.cpp`` files, resulting in a circular dependency."
msgstr ""
"Y luego incluimos ``SequentialCommandGroup.h`` en \"Command.cpp\". Sin "
"embargo, si estas funciones de decorador se templaron, no podemos escribir "
"definiciones en los archivos ``.cpp``, resultando en una dependencia "
"circular."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:180
msgid "Java vs C++ Syntax"
msgstr "Sintaxis de Java vs Sintaxis de C++"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:181
msgid ""
"These decorators usually save more verbosity in Java (because Java requires "
"raw ``new`` calls) than in C++, so in general, it does not make much of a "
"syntanctic difference in C++ if you create the command group manually in "
"user code."
msgstr ""
"Estos decoradores suelen ahorrar más verbosidad en Java (porque Java "
"requiere llamadas ``nuevas`` sin procesar) que en C++, así que en general, "
"no hay mucha diferencia sintáctica en C++ si se crea el grupo de comandos "
"manualmente en código de usuario."
